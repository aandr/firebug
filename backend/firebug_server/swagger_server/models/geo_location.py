# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GeoLocation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, latitude: float=None, lat_direction: str=None, longitude: float=None, lon_direction: str=None):  # noqa: E501
        """GeoLocation - a model defined in Swagger

        :param latitude: The latitude of this GeoLocation.  # noqa: E501
        :type latitude: float
        :param lat_direction: The lat_direction of this GeoLocation.  # noqa: E501
        :type lat_direction: str
        :param longitude: The longitude of this GeoLocation.  # noqa: E501
        :type longitude: float
        :param lon_direction: The lon_direction of this GeoLocation.  # noqa: E501
        :type lon_direction: str
        """
        self.swagger_types = {
            'latitude': float,
            'lat_direction': str,
            'longitude': float,
            'lon_direction': str
        }

        self.attribute_map = {
            'latitude': 'latitude',
            'lat_direction': 'lat_direction',
            'longitude': 'longitude',
            'lon_direction': 'lon_direction'
        }

        self._latitude = latitude
        self._lat_direction = lat_direction
        self._longitude = longitude
        self._lon_direction = lon_direction

    @classmethod
    def from_dict(cls, dikt) -> 'GeoLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GeoLocation of this GeoLocation.  # noqa: E501
        :rtype: GeoLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def latitude(self) -> float:
        """Gets the latitude of this GeoLocation.

        latitude of the object  # noqa: E501

        :return: The latitude of this GeoLocation.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this GeoLocation.

        latitude of the object  # noqa: E501

        :param latitude: The latitude of this GeoLocation.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def lat_direction(self) -> str:
        """Gets the lat_direction of this GeoLocation.

        N or S  # noqa: E501

        :return: The lat_direction of this GeoLocation.
        :rtype: str
        """
        return self._lat_direction

    @lat_direction.setter
    def lat_direction(self, lat_direction: str):
        """Sets the lat_direction of this GeoLocation.

        N or S  # noqa: E501

        :param lat_direction: The lat_direction of this GeoLocation.
        :type lat_direction: str
        """
        if lat_direction is None:
            raise ValueError("Invalid value for `lat_direction`, must not be `None`")  # noqa: E501

        self._lat_direction = lat_direction

    @property
    def longitude(self) -> float:
        """Gets the longitude of this GeoLocation.

        longitude of the object  # noqa: E501

        :return: The longitude of this GeoLocation.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this GeoLocation.

        longitude of the object  # noqa: E501

        :param longitude: The longitude of this GeoLocation.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def lon_direction(self) -> str:
        """Gets the lon_direction of this GeoLocation.

        E or W  # noqa: E501

        :return: The lon_direction of this GeoLocation.
        :rtype: str
        """
        return self._lon_direction

    @lon_direction.setter
    def lon_direction(self, lon_direction: str):
        """Sets the lon_direction of this GeoLocation.

        E or W  # noqa: E501

        :param lon_direction: The lon_direction of this GeoLocation.
        :type lon_direction: str
        """
        if lon_direction is None:
            raise ValueError("Invalid value for `lon_direction`, must not be `None`")  # noqa: E501

        self._lon_direction = lon_direction
